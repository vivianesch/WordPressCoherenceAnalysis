ActiveMembers = filter(x, Freq>10)
return(totalAM<-nrow(ActiveMembers)) #Total members of active group
return(ActiveMembers <- ActiveMembers[order(ActiveMembers$Freq, decreasing = TRUE),])
MedianMembers = filter(x, Freq<10 & Freq>4)
return(totalMM<-nrow(MedianMembers))
return(MedianMembers <- MedianMembers[order(MedianMembers$Freq, decreasing = TRUE),])
LessMembers = filter(Reporter, Freq<4)
return(totalLM<-nrow(LessMembers))
return(LessMembers<- LessMembers[order(LessMembers$Freq, decreasing = TRUE),])
}
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
MemberGroupsWP(Reporter)
ActiveMembers = function(x) {
ActiveMembers = filter(x, Freq>10)
return(totalAM<-nrow(ActiveMembers)) #Total members of active group
return(ActiveMembers <- ActiveMembers[order(ActiveMembers$Freq, decreasing = TRUE),])
}
totalAM
ActiveMembers(Reporter)
ActiveMembers = function(x) {
ActiveMembers = filter(x, Freq>10)
totalAM<-nrow(ActiveMembers) #Total members of active group
ActiveMembers <- ActiveMembers[order(ActiveMembers$Freq, decreasing = TRUE),]
}
ActiveMembers(Reporter)
ActiveMembers
MemberGroupsWP = function(x) {
y = filter(x, Freq>10)
z <-nrow(ActiveMembers) #Total members of active group
x <- ActiveMembers[order(ActiveMembers$Freq, decreasing = TRUE),]
return(x)
}
MemberGroupsWP(Reporter)
MemberGroupsWP = function(x) {
y = filter(x, Freq>10)
z <-nrow(y) #Total members of active group
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
MemberGroupsWP(Reporter)
MemberGroupsWP = function(x) {
y = filter(x, Freq>10)
z <-nrow(y) #Total members of active group
x <- y[order(y$Freq, decreasing = TRUE),]
return(x,z)
}
MemberGroupsWP(Reporter)
MemberGroupsWP = function(x) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
MemberGroupsWP(Reporter)
GroupActive = function(x,z) {
y = filter(x, Freq>10)
z<-totalAM<-nrow(y)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x,z)
}
GroupActive(Reporter,NULL)
GroupActive = function(x,z) {
y = filter(x, Freq>10)
z<-totalAM<-nrow(y)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
returnValue(z)
}
GroupActive(Reporter, NULL)
GroupActive = function(x,z) {
y = filter(x, Freq>10)
z<-totalAM<-nrow(y)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
return(z)
}
GroupActive(Reporter)
View(ActiveMembers)
GroupActive = function(x,z) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(ActiveMembers<-x)
}
GroupActive(Reporter)
#READ DATA
library(readr)
library(dplyr)
library(plotly)
TicketW <- read_csv('~/PhD Analysis/1. PhD escriptive exploratory analysis/TicketW.csv')
View(TicketW)
dim(TicketW) #dimension
TicketW[1:5,]  #5 fist lines
summary(TicketW)
glimpse(TicketW)
# Transform vector into a data frame with frequency of levels and proportion
unianalysis = function (x) {
y<-table(x)
y<-as.data.frame(as.table(y))
colp<-prop.table(y$Freq) #Proportion
y<-data.frame(y,colp)
return(y)
}
# Var1
Status<-unianalysis(TicketW$Status)
#Var2
TType<-unianalysis(TicketW$Type)
#Var3
Priority<-unianalysis(TicketW$Priority)
#Var4
Milestone<-unianalysis(TicketW$Milestone)
#Var5
Component<-unianalysis(TicketW$Component)
Component = filter(Component, Freq>100) # Filter components with more than 100 tickets
sum(Component$Freq) #Total Tickets into most frequent components (more than 100 tickets)
#Var6
Severity<-unianalysis(TicketW$Severity)
#Var7
Focuses<-unianalysis(TicketW$Focuses)
Focuses = filter(Focuses, Freq>10) # Filter Focuses with more than 10 tickets
Focuses<-Focuses[order(Focuses$Freq, decreasing = TRUE),]
sum(Focuses$Freq) #Total Tickets into most frequent components (more than 100 tickets)
#Var8
Keywords<-unianalysis(TicketW$Keywords)
Keywords = filter(Keywords, Freq>8)
Keywords<-Keywords[order(Keywords$Freq, decreasing = TRUE),]
sum(Keywords$Freq)
# Function for establish groups of active, median or less active members
##1.2.1 Filter the most active group of reporters (Which reporter with more than 10 tickets)
#Ranking the Most active members
#1.2.2 Filter the median active group
#Ranking the Median active members
#1.2.3 Filter the less active group (Which with less than 10 tickets)
#Ranking the less active Merbers
GroupActive = function(x,z) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(ActiveMembers<-x)
}
MedianMembers = filter(x, Freq<10 & Freq>4)
# Function for establish groups of active, median or less active members
##1.2.1 Filter the most active group of reporters (Which reporter with more than 10 tickets)
#Ranking the Most active members
#1.2.2 Filter the median active group
#Ranking the Median active members
#1.2.3 Filter the less active group (Which with less than 10 tickets)
#Ranking the less active Merbers
GroupActive = function(x,z) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(ActiveMembers<-x)
}
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
MemberGroupsWP(Reporter)
# Function for establish groups of active, median or less active members
##1.2.1 Filter the most active group of reporters (Which reporter with more than 10 tickets)
#Ranking the Most active members
#1.2.2 Filter the median active group
#Ranking the Median active members
#1.2.3 Filter the less active group (Which with less than 10 tickets)
#Ranking the less active Merbers
GroupActive = function(x,z) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(ActiveMembers<-x)
}
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
)
# Function for establish groups of active, median or less active members
##1.2.1 Filter the most active group of reporters (Which reporter with more than 10 tickets)
#Ranking the Most active members
#1.2.2 Filter the median active group
#Ranking the Median active members
#1.2.3 Filter the less active group (Which with less than 10 tickets)
#Ranking the less active Merbers
GroupActive = function(x,z) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(ActiveMembers<-x)
}
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
View(Focuses)
View(Component)
GroupActive = function(x,z) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
ActiveMembers<-x
return(ActiveMembers)
}
GroupActive(Reporter)
ActiveReporters<-GroupActive(Reporter)
ActiveReporters
# Functions for establish groups of active, median or less active members
##1.2.1 Filter the most active group of reporters (Which reporter with more than 10 tickets)
GroupActive = function(x) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#1.2.2 Filter the median active group
GroupMedian = function(x) {
y = filter(x, Freq<10 & Freq>4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#1.2.3 Filter the less active group
GroupAlien = function(x) {
y = filter(x, Freq<4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
ActiveReporters<-GroupActive(Reporter)
MedianReportes<-GroupMedian(Reporter)
LessReporters<-GroupAlien(Reporter)
# Functions for establish groups of active, median or less active members
##1.2.1 Filter the most active group of reporters (Which reporter with more than 10 tickets)
GroupActive = function(x) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#1.2.2 Filter the median active group
GroupMedian = function(x) {
y = filter(x, Freq<10 & Freq>4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#1.2.3 Filter the less active group
GroupAlien = function(x) {
y = filter(x, Freq<4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
ActiveReporters<-GroupActive(Reporter)
MedianReportes<-GroupMedian(Reporter)
LessReporters<-GroupAlien(Reporter)
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
ActiveReporters<-GroupActive(Reporter)
MedianReportes<-GroupMedian(Reporter)
LessReporters<-GroupAlien(Reporter)
# Functions for establish groups of active, median or less active members
##1.2.1 Filter the most active group of reporters (Which reporter with more than 10 tickets)
GroupActive = function(x) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#1.2.2 Filter the median active group
GroupMedian = function(x) {
y = filter(x, Freq<10 & Freq>4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#1.2.3 Filter the less active group
GroupAlien = function(x) {
y = filter(x, Freq<4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#Find Groups and quantity of people for each group
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
ActiveReporters<-GroupActive(Reporter)
totalAR<-nrow(ActiveReporters)
MedianReportes<-GroupMedian(Reporter)
totalMR<-nrow(MedianReporters)
# Functions for establish groups of active, median or less active members
##1.2.1 Filter the most active group of reporters (Which reporter with more than 10 tickets)
GroupActive = function(x) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#1.2.2 Filter the median active group
GroupMedian = function(x) {
y = filter(x, Freq<10 & Freq>4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#1.2.3 Filter the less active group
GroupAlien = function(x) {
y = filter(x, Freq<4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#Find Groups and quantity of people for each group
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
ActiveReporters<-GroupActive(Reporter)
totalAR<-nrow(ActiveReporters)
MedianReporters<-GroupMedian(Reporter)
totalMR<-nrow(MedianReporters)
LessReporters<-GroupAlien(Reporter)
totalLR<-nrow(LessReporters)
# Functions for establish groups of active, median or less active members
#1. Filter the most active group of reporters (Which reporter with more than 10 tickets)
GroupActive = function(x) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
z<-prop.table(x)
x<-c(x,z)
return(x)
}
#2. Filter the median active group
GroupMedian = function(x) {
y = filter(x, Freq<10 & Freq>4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#3. Filter the less active group
GroupAlien = function(x) {
y = filter(x, Freq<4)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
ActiveReporters<-GroupActive(Reporter)
totalAR<-nrow(ActiveReporters)
ActiveReporters
MedianReporters<-GroupMedian(Reporter)
totalMR<-nrow(MedianReporters)
MedianReporters
GroupActive = function(x) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
colp<-prop.table(x$Freq) #Proportion
x<-data.frame(x,colp)
return(x)
}
GroupActive(Reporter)
# Transform vector into a data frame with frequency of levels and proportion
unianalysis = function (x) {
y<-table(x)
y<-as.data.frame(as.table(y))
general_prop<-prop.table(y$Freq) #Proportion
y<-data.frame(y, general_prop)
return(y)
}
# Var1
Status<-unianalysis(TicketW$Status)
#Var2
TType<-unianalysis(TicketW$Type)
#Var3
Priority<-unianalysis(TicketW$Priority)
#Var4
Milestone<-unianalysis(TicketW$Milestone)
#Var5
Component<-unianalysis(TicketW$Component)
Component = filter(Component, Freq>100) # Filter components with more than 100 tickets
sum(Component$Freq) #Total Tickets into most frequent components (more than 100 tickets)
#Var6
Severity<-unianalysis(TicketW$Severity)
#Var7
Focuses<-unianalysis(TicketW$Focuses)
Focuses = filter(Focuses, Freq>10) # Filter Focuses with more than 10 tickets
Focuses<-Focuses[order(Focuses$Freq, decreasing = TRUE),]
sum(Focuses$Freq) #Total Tickets into most frequent components (more than 100 tickets)
#Var8
Keywords<-unianalysis(TicketW$Keywords)
Keywords = filter(Keywords, Freq>8)
Keywords<-Keywords[order(Keywords$Freq, decreasing = TRUE),]
sum(Keywords$Freq)
# Functions for establish groups of active, median or less active members
#1. Filter the most active group of reporters (Which reporter with more than 10 tickets)
GroupActive = function(x) {
y = filter(x, Freq>10)
x <- y[order(y$Freq, decreasing = TRUE),]
group_prop<-prop.table(x$Freq) #Proportion
x<-data.frame(x,group_prop)
return(x)
}
#2. Filter the median active group
GroupMedian = function(x) {
y = filter(x, Freq<10 & Freq>4)
x <- y[order(y$Freq, decreasing = TRUE),]
group_prop<-prop.table(x$Freq) #Proportion
x<-data.frame(x,group_prop)
return(x)
}
#3. Filter the less active group
GroupAlien = function(x) {
y = filter(x, Freq<4)
group_prop<-prop.table(x$Freq) #Proportion
x<-data.frame(x,group_prop)
x <- y[order(y$Freq, decreasing = TRUE),]
return(x)
}
#Find Groups and quantity of people for each group
Reporter<-unianalysis(TicketW$Reporter)
totalReporter<-nrow(Reporter)
ActiveReporters<-GroupActive(Reporter)
totalAR<-nrow(ActiveReporters)
ActiveReporters
MedianReporters<-GroupMedian(Reporter)
totalMR<-nrow(MedianReporters)
LessReporters<-GroupAlien(Reporter)
totalLR<-nrow(LessReporters)
Owner<-unianalysis(TicketW$Owner)
totalOwner<-nrow(Owner)
#Find Groups and quantity of people for each group
ActiveOwner<-GroupActive(Owner)
totalAO<-nrow(ActiveOwner)
MedianOwner<-GroupMedian(Owner)
totalMO<-nrow(MedianOwner)
LessOwner<-GroupAlien(Owner)
totalLO<-nrow(LessOwner)
#Total members per Reporter
MembersTotalR<-c(totalReporter,totalAR,totalMR,totalLR)
CoreGroupR<-c("Reporters","Active Reporters","Median Reporters","Alien Reporters")
PropMR<-prop.table(MembersTotalR)# Proportion
WPCGroupR<-data.frame(CoreGroupR,MembersTotalR,PropMR)
#Total members per Owner
MembersTotalO<-c(totalOwner,totalAO,totalMO,totalLO)
CoreGroupO<-c("Owners","Active Owners","Median Owners","Alien Owners")
PropMO<-prop.table(MembersTotalO) #Proportion
WPCGroupO<-data.frame(CoreGroupO,MembersTotalO,PropMO)
Status#Var1
#Graphics
pie(Status$Freq, main="Frequency of Tickets Status", label=Status$x, col = rainbow(7))
TType# Var2
#Graphics
pie(TType$Freq, main="Frequency of Tickets Type", label=TType$x, col = rainbow(7))
Priority# Var3
#Graphics
pie(Priority$Freq, main="Frequency of Tickets Priority", label=Priority$x, col = rainbow(7))
Milestone#Var4
#Graphics
pie(Milestone$Freq, main="Frequency of Tickets Milestone", label=Milestone$x, col = rainbow(7))
Component#Var5
#Graphics
barplot(Component$Freq, las = 2, names.arg = Component$x,
col ="lightgreen", main ="Most frequent Components",
ylab = "Component frequencies")
Severity #Var6
#Graphics
pie(Severity$Freq, main="Frequency of Tickets Severity", label=Severity$x, col = rainbow(7))
Focuses#Var7
#Graphics
barplot(Focuses$Freq, las = 2, names.arg = Focuses$x,
col ="lightblue", main ="Frequency of Tickets Focuses",
ylab = "Focuses frequencies")
Keywords#Var8
#Graphics
barplot(Keywords$Freq, las = 2, names.arg = Keywords$x,
col ="orangered", main ="Frequency of Tickets Keywords",
ylab = "Keywords frequencies")
#Bring the variables from the first univariable analysis
Reporter
Reporter
ActiveReporters
MedianReporters
LessReporters
#1.1 Analyse Keywords used for Active reporters
Bianalysis = function(df,Var1,Var2) {
Var1_Var2<- df %>% select(Var1,Var2) #Table of Reporters and Keywords
return(Var1_Var2)
}
Reporter_Keywords<-Bianalysis(TicketW,Reporter,Keywords)
#Bring the variables from the first univariable analysis
Reporter
Reporter
ActiveReporters
MedianReporters
LessReporters
#1.1 Analyse Keywords used for Active reporters
Bianalysis = function(x,y,z) {
attach(x)
w<- x %>% select(y,z) #Table of Reporters and Keywords
return(w)
}
Reporter_Keywords<-Bianalysis(TicketW,Reporter,Keywords)
library(readr)
install.packages("dplyr")
install.packages("PythonInR")
glimpse(TicketW)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
install.packages("dplyr")
install.packages("PythonInR")
install.packages("reticulate")
library(dplyr)
library(plotly)
library(markdown)
library(ggplot2)
library(lattice)
library(tidyr)
#READ DATA
TicketW <- read_csv('~/PhD Analysis/1. PhD escriptive exploratory analysis/TicketW.csv')
View(TicketW) # Read
glimpse(TicketW)
library(readr)
install.packages("dplyr")
library(dplyr)
library(plotly)
library(markdown)
library(ggplot2)
library(lattice)
library(tidyr)
#READ DATA
TicketW <- read_csv('~/PhD Analysis/1. PhD escriptive exploratory analysis/TicketW.csv')
View(TicketW) # Read
glimpse(TicketW)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
